# =================
# Useful rules
# =================

.PHONY: all-recursive clean-recursive distclean-recursive
all-recursive: $(subdirs)

clean-recursive: $(subdirs)

distclean-recursive: $(subdirs)

# -----------------------------
# clean
# -----------------------------

.PHONY: src-clean
src-clean:
	@echo "Cleaning up ."
	@echo `expr "$$PWD" : "$(topdir)\(.*\)"`
	@rm -f *.o *~ .*.d* *~

.PHONY: src-distclean
src-distclean:
	@echo  "Cleaning up ."
	@echo `expr "$$PWD" : "$(topdir)\(.*\)"`
	@rm -f *.so *.dll *.a *.o .*.d* *~ #*
	

# ----------------------------------------------------------
# Command for recursively entering a list of directories 
# and calling "make" in there
# ----------------------------------------------------------

.PHONY: $(subdirs)
$(subdirs):
	@$(MAKE) --no-print-directory -C $@ $(MAKECMDGOALS)


# ---------------------------------------------------------------------------
# How to compile .C, .cpp, .cc, .c, .f and .cu files  (cu file is for cuda )
# --------------------------------------------------------------------------

%.$(obj-suffix) : %.C
	@echo "Compiling C++ (in "$(mode)" mode) "$<" ..."
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS)  $(OPT_LEVEL) -c $< -o $@


%.$(obj-suffix) : %.cpp
	@echo "Compiling C++ (in "$(mode)" mode) "$<" ..."
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPT_LEVEL) -c $< -o $@


%.$(obj-suffix) : %.cc
	@echo "Compiling C++ (in "$(mode)" mode) "$<" ..."
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPT_LEVEL) -c $< -o $@


%.$(obj-suffix): %.c
	@echo "Compiling C (in "$(mode)" mode) "$<" ..."
	@$(CC) $(CFLAGS) $(CPPFLAGS) -c $(OPT_LEVEL) $< -o $@
	

%.$(obj-suffix): %.f
	@echo "Compiling F77 (in "$(mode)" mode) "$<" ..."
	@$(FC) $(FCFLAGS) $(CPPFLAGS) -c $(OPT_LEVEL) $< -o $@

%.$(obj-suffix): %.cu
	@echo "Compiling Cuda .cu file (in "$(mode)" mode) "$<" ..."
#	@$(NVCC) $(CUXXFLAGS) $(CPPFLAGS) -c $(OPT_LEVEL) $< -o $@
#	@echo "AAAAAA $(CUPPFLAGS)"
	@$(NVCC) $(CUXXFLAGS) $(CUPPFLAGS) -c $< -o $@
	

# -------------------------------------------------
# Dependencies - stored in .d-file 
# -------------------------------------------------

.%.d: %.cpp %.hpp
	@$(CC) -MT $(basename $<).$(obj-suffix) -MM $(CPPFLAGS) $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.$(obj-suffix)[ :]*,\1.\*\.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

.%.d: %.cu %.hpp
	@$(CXX) -MT $(basename $<).$(obj-suffix) -MM -x c++ $(CPPFLAGS) $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.$(obj-suffix)[ :]*,\1.\*\.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

# ------------------------------------------------------------------------------------
# <ss> I don't know what this stuff is for, but it's connected to the dependency file
# ------------------------------------------------------------------------------------

# -S: Stop after the stage of compilation proper; do not assemble. Output is assembler code file 
%.s: %.cpp .%.d
	@$(CXX) $(CPPFLAGS) -S $<

%.s: %.cu .%.d
	@$(CXX) $(CPPFLAGS) -S $<


ifeq (,$(findstring clean,$(MAKECMDGOALS)))
ifneq (x$(srcfiles),x)
-include $(patsubst %,.%,$(srcfiles:.cpp=.d))
-include $(patsubst %,.%,$(srcfiles:.cu=.d))
endif
endif
